ShoRAH consists of several programs:

dec.py       - local error correction based on diri_sampler
diri_sampler - Gibbs sampling for Dirichlet process mixture
contain.cc   - eliminate redundant reads
mm.py        - maximum matching haplotype construction
freqEst.cc   - EM algorithm for haplotype frequency
fas2read.pl  - translates between two formats for read data files
s2f.py       - multiple sequence alignment of NGS reads

Copyright 2007, 2008, 2009, 2010
Niko Beerenwinkel,
Arnab Bhattacharya,
Nicholas Eriksson,
Moritz Gerstung,
Lukas Geyrhofer,
Osvaldo Zagordi,
ETH Zurich
under GPL. See file LICENSE for details.
The program also includes other software written by third parties.
This has been distributed according to the licenses provided by the
respective authors.


GENERAL USAGE:
--------------------------------------------------

Install:
	type 'make' to build the C++ programs, then run. See INSTALL
	for additional information

Run:
	The whole process can be run one step after the other, or
	one can invoke shorah.py, that runs the whole process from read
	file to frequency estimation. The input must be a fasta file with
	reads or a multiple alignment of the reads in fasta format (.far
	extension). Shorah uses the program s2f to produce the alignment,
	or the user copy its alignment to a file with the .far extension
	and run shorah on it.



S2F.PY
--------------------------------------------------
Command line options
	-h, --help		show help message and exit
  	-f INPUT, --readfile=INPUT
  	-r REF, --ref=REF	file with reference genome in fasta format, one sequence only
  	-o O, --output=O	output suffix must be '.far' or none for stdout
  	-t THRESHOLD, --threshold=THRESHOLD <default=0.2>
       			if errors represent more than 20%, read is discarded
	-d, --delete_files    delete temporary files <default=False>
	-n, --no_pad_insert   do not insert padding gaps <default=insert>

Output:
	The program s2f.py takes as input the file of reads (in fasta format) and the
	reference genome. It produces a set of pairwise
	alignments, then merge them to obtain a multiple one in a file with
	far extension (file_name.far). This is the input to the subsequent analysis
	performed with dec.py.

Examples:
	A sample file has been included for testing purposes, combined.fasta
	It consists of 1000 reads of mean length equal to 310 bp, derived from two
	haplotypes. The reference sequence is in file ref_genome.fasta.
	We recommend moving both files to a different working directory and follow
	the rule of thumb: "one experiment in one directory".
	
	The far file can be created  from the fasta file and the reference
	[user@host]$ your_shorah_installation/s2f.py -f combined.fasta -r ref_genome.fasta -o combined.far

	

SHORAH.PY:
--------------------------------------------------
Command line options (most are relevant to dec.py and shorah.py):
	The following options regarding the error correction step apply to
	the program shorah.py. They can be passed to dec.py as well.

Options:
	-h, --help            show this help message and exit
	-f F, --readsfile=F   file with reads <.fas or .far format>
	-j J, --iterations=J  iterations in dpm sampling <1000>
	-a A, --alpha=A       alpha in dpm sampling <0.01>
	-w W, --windowsize=W  window size in <201>
	-t THRESHOLD, --threshold=THRESHOLD
               		      if similarity is less, throw reads away...
                              <default=0.7>
	-n, --no_pad_insert   do not insert padding gaps <default=insert>
	-r REF, --ref=REF     reference genome
	-s S, --winshifts=S   number of window shifts <3>
	-k, --keep_files      keep intermediate files (Gibbs sampling)
                              <default=False>


Examples:
	How to run shorah on the example file described above.
	
	This runs the alignment step, sets the number of iterations in the correction one to 1000 and alpha to 1.0
	[user@host]$ your_shorah_installation/shorah.py -f combined.fasta -r ref_genome.fasta -j 1000 -a 1.0
	
	If the alignment file is already there, one can run
	[user@host]$ your_shorah_installation/shorah.py -f combined.far -j 1000 -a 1.0

	
Output:
	The very end of the program is a set of haplotypes with relative frequencies at
	combined_cor.popl. It is important to analyse the output files of dec.py (see below).


The file shorah.py runs all the following steps (plus the initial alignment if necessary) assuming
that the original file name was "sample.fasta":

## 1. error correction
## output: sample_cor.fas (corrected fasta reads)
dec.py -f sample.sff (or sample.fas) + additional_options

## 2. translate to read format
## output: sample_cor.read
fas2read.pl -f sample_cor.fas

## 3. eliminate redundant reads
## output: sample_cor.rest
contain -f sample_cor

## 4. run maximum matching, output up to 200 haplotypes
## output: sample_cor.geno
mm.py sample_cor.rest 200

## 5. run EM
## output: sample_cor.popl
freqEst -f sample_cor



DEC.PY:
--------------------------------------------------
Command line options: see SHORAH.PY below.


Other options:
	These parameters are controlled by the global variables declared at the beginning
	of file dec.py. See the relative comments for an explanation.
	IMPORTANT: Since version 0.3 dec.py runs in parallel on multi-processor computers.
	By default it uses all available CPUs, if you want to limit the number of parallel
	processes, edit the variable max_proc in dec.py

Tips:
	Rerunning on selected windows:
	When running with option -k, dec.py produces and retains several files in the subdirectory
	"corrected/" of the form w1-99.reads-cor.fas.gz, where 1 and 99 are, respectively, the beginning
	and the end of the window under consideration. If the user wishes to rerun dec.py on selected
	windows only, one should simply delete the corresponding file in the directory "corrected/"
	NOTE: The error correction implemented in diri_sampler will not run for any window whose corresponding
	file is present in the directory "corrected/".
	
	Changing parameters on the fly:
	If the user wishes to change the number of iterations of diri_sampler (because the burn-in phase is
	shorter or longer than expected) one can write a file w1-99.iter (again 1 and 99 are the boundaries
	of the window) with a single line that contains the desired number of iterations.
	Similarly, one can change alpha by writing into a file w1-99.alpha a float with the new value of alpha.
	While alpha can be increased and decreased by editing the .alpha file without adversely affecting the
	functioning of the program (but obviously its result), we recommend changing the number of iterations
	at most once.

	Maximum weight of read objects:
	The new implementation of diri_sampler clubs identical reads into objects defined by the read sequence
	and the number of reads in the object. This allows for faster computation, but might introduce a bias
	into the sampling procedure. One can limit the maximum number of identical reads in a single object by
	editing the variable LIMIT in dpm_src/dpm_sampler.h (default is 10000)
	
Output:
	The program dec.py outputs several files. The most important is sample_cor.fas,
	which contains the corrected reads and is passed by shorah (or by the user) to the
	following step (fas2read). It also outputs a file called "proposed.dat". It contains
	the number of proposed new clusters in each window. One should always make sure that
	a sufficient number of new cluster has been proposed (rule of thumb, at least 0.1 per
	step or more).
	In order to make the analysis of the sampling process easier, two additional python programs are
	added: plot_sampling.py and plot_stat.py. In order to use all of their functionality, numpy
	and matplotlib are required (http://www.scipy.org and http://matplotlib.sourceforge.net/).


File formats:
--------------------------------------------------

A. reads are stored in two formats:

  1. multi-fasta read files look like
  
    >READ_ID_NUMBER START_POS $ QUALITY_SCORES
    SEQUENCE
    
    for example:
    >READ_1  20 $ 10 15 20 25
    ACGT
    
    the quality scores and dollar sign are optional
    
  2. read files look like
    START_POS SEQUENCE
    
    for example
    20 ACGT
    
    Start positions are indexed beginning at 0.

  3. SFF files files used in the 454 pipeline (not yet implemented)

B. populations are stored in a multi-fasta format

  >HAPLOTYPE_NAME underscore FREQUENCY
  HAPLOTYPE_SEQUENCE

  e.g.,
  >H1_0.24
  AACTGTAGCGTACTGACTGACTG


C. lists of haplotypes are stored in a text file, one per line
